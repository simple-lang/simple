/* 
	Copyright (c) 2018 Abdulazeez Adeshina Abdulazeez <laisibizness@gmail.com"> 
	MIT License Copyright (c) 2018 simple 
*/

/* 
 * @Filename - List.sim
 * @Author - Abdulazeez Abdulazeez Adeshina
 * @Date - 15 June 2018
 * @Time - 19:49 PM
 */

module simple.core

call "Object.sim"

/* Adds a new value to list/array */
block addToList(list, value)
    # Check if value to be added to the array is a List, String or number.
    if (isList(value) || isString(value) || isNumber(value))
        list + value
        return list +crlf
        # Else throw an error.
        else
            return  __err__
end

/* Remove a value from the list using the index number as an ID. */
block removeFromList(list, indexNumber)
    # Verify that value passed is a number e.g 0, 1, 2 etc.
    if(isNumber(indexNumber))
        list[indexNumber] = ""
        return list +crlf
        else
            return __err__
end

/*
*@  Reversing an array 
 *@  Changes the array from ascending to descending and vice versa.
 *@  It changes the indexNumber also.
*/
block reverseList(List)
            x = 0
            list = []
            # This is subject to Fix in the next version of simple.
            do { list + List[lengthOf(List) - x] x++ } while x < lengthOf(List) + 1
            List = list
            return List
end

# block indexOf(List, value) 
    
class List : Object
    __OBJECT_NAME 		= "List"
    __OBJECT			= []

	/*
		The @Class list constructor accepting 
			@DataType List
			@DataType String
			@Class List
			
		@DataType LIST
		If list is sent as parameter then the class treat
		the parameter.

		@DataType STRING
		If string is the parameter it is also
		treated as @DataType List. 
		In simple-lang @DataType string is simply a list of char arrays
		e.g 
			@Code
			str = "string"
			#is simply same as
			str = ["s","t","r","i","n","g"]
			@EndCode
		
		@Class List
		In a situation whereby the parameter is an instance of @Class List
		all the previous attribute of the current class is disposed and the 
		attribute of the parameter class is transfered into this class. 
		e.g 
			@Code
			li1 = new List(["a","a"])
			li2 = new List(li1)
			li3 = li1
			
			#li2 and li3 is simply the same thing but li2 
			#with more function. You can review the source code of @Class List 
			[HERE](https://github.com/simple-lang/simple/blob/master/modules/simple/core/List.sim)
			
		Any other type of parameter is an Error
		
	*/
    block List(list)
		try 
			if (list.getType() == getType()) {
				this.__OBJECT = list.object()
			}
			return
		catch end
		if !isList(list) && !isString(list) { throw(__NOT_LIST_ERROR) }
        __OBJECT = list
        return __OBJECT

	/*
		.indexOf(n) block is a safe block for getting the item in the list
		at n index very similar to using the block quote [n] to get the index
		but with more type check and safe call. 
		@Ignore Awesome for production @End
	*/
	#check to ensure the n index specified is not more than size of list
	#confirm it number only then get index
    block indexOf(n)
		if n > length() { throw(__INDEX_GREATER_THAN_SIZE) }
		if isNumber(n)
			return __OBJECT[n]
		else 
			throw(__NUMBER_REQUIRED_ERROR)
		end
		
	/*
		Get the length or size of the current list object of the class
	*/
	block length()
		return lengthOf(__OBJECT)

    block push(x)
        __OBJECT + x
        return __OBJECT

# Still needs some little adjustments and changes.
    block pop(x)
        list[x] = ""
        return list

    block keys()
        return list

    block reverse()
        x = 0
        reverserArray = []
        do {
            reverserArray + list[lengthOf(list) - x] x++
        } while x < lengthOf(list) + 1
        list = reverserArray
        return list
    end

/* Array slice function. Supports 2 parameter alone, if you intend to pass an argument alone, use the .indexOf() method */
block slice(x, y)
    if (isNumber(x) && isNumber(y))
        if (x = 0 && y = 0)
             return "[]"
            end
        if (list[x + 1] == list[y])
            return list[x]
        elif (list[x + 1]  != list[y])
            do {
                return list[x++ - 1]
            } while x < list[y]
        else
            return "[]"
            end        
    end


/* Sorts arrays just like the javascript's .sort() function. It's not working yet */
block sort(a, b)
    # return b - a
    return list[b] - list[a]
	
	
	private 
		__NOT_LIST_ERROR = "the parameter is not a list"
		__NUMBER_REQUIRED_ERROR = "only number is required as parameter "
		__INDEX_GREATER_THAN_SIZE = "the provided n index is greater than list size"